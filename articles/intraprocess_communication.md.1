---
tip: translate by openai@2023-05-29 08:11:46
layout: default
title: Intra-process Communications in ROS 2
permalink: articles/intraprocess_communications.html
abstract: Description of the current intra-process communication mechanism in ROS 2 and of its drawbacks. Design proposal for an improved implementation. Experimental results.
published: true
author: '[Alberto Soragna](https://github.com/alsora) [Juan Oxoby](https://github.com/joxoby) [Dhiraj Goel](https://github.com/dgoel)'
date_written: 2020-03
last_modified: 2020-03
Authors: {{ page.author }}
Date Written: {{ page.date_written }}
Last Modified: {% if page.last_modified %}{{ page.last_modified }}{% else %}{{ page.date_written }}{% endif %}
---

> [!NOTE]
> 感觉这篇文章可以解释多个 sub 订阅同一个 pub 时候拷贝的问题
> 以及 ros 与 dds 中概念的对应关系
> ref: [](C:\Users\trantor\Downloads\Documents\ChatGPT\dialogue\dds\topic_20230530.md)

## Introduction

The subscriptions and publications mechanisms in ROS 2 fall in two categories:

> ROS 2 中的订阅和发布机制分为两类：

- intra-process: messages are sent from a publisher to subscriptions via in-process memory.
- inter-process: messages are sent via the underlying ROS 2 middleware layer. The specifics of how this happens depend on the chosen middleware implementation and may involve serialization steps.

> - 内部进程：发布者**通过内存发送消息**给订阅者。
> - 跨进程：消息是**通过底层的 ROS 2 中间件层发送**的。这种方式的细节取决于所选择的中间件实现，可能**涉及序列化步骤**。

This design document presents a new implementation for the intra-process communication.

> 这份设计文档提出了一种新的用于进程间通信的实现方案。

## Motivations for a new implementation

Even if ROS 2 supports intra-process communication, the implementation of this mechanism has still much space for improvement.

> 即使 ROS 2 支持进程内通信，这种机制的实现仍有很大的改进空间。

Until ROS 2 Crystal, major performance issues and the lack of support for shared pointer messages were preventing the use of this feature in real applications.

> 直到 ROS 2 Crystal，主要性能问题以及**对共享指针消息的缺乏支持**，阻止了这一功能在实际应用中的使用。

With the ROS 2 Dashing release, most of these issues have been addressed and the intra-process communication behavior has improved greatly ([see ticket](https://github.com/ros2/ros2/issues/649)).

> 随着 ROS 2 Dashing 发布，这些问题大部分已经得到解决，而且进程间通信行为也大大改善了([参见工单](https://github.com/ros2/ros2/issues/649))。

> [!NOTE]
> 可以详细看一下这里面的讨论

The current implementation is based on the creation of a ring buffer for each `Publisher` and on the publication of meta-messages through the middleware layer.

> 当前实现基于为每个发布者创建一个环形缓冲区，以及通过中间件层发布元消息。

When a `Publisher` has to publish intra-process, it will pass the message to the `IntraProcessManager`.

> 当 publisher 需要进行内部流程出版时，它将把消息传递给 IntraProcessManager。

Here the message will be stored in the **ring buffer** associated with the `Publisher`.

> 这条消息将存储在与发布者相关联的环形缓冲区中。

In order to extract a message from the `IntraProcessManager` two pieces of information are needed: the id of the `Publisher` (in order to select the correct ring buffer) and the position of the message within its ring buffer.

> 要从`IntraProcessManager`中提取消息，需要两份信息：
>
> - **`Publisher`的 ID**(以选择正确的环形缓冲区)和
> - **消息在其环形缓冲区中的位置**。

A meta-message with this information is created and sent through the ROS 2 middleware to all the `Subscription`s, which can then retrieve the original message from the `IntraProcessManager`.

> 一条具有此信息的元信息被创建并通过 ROS 2 中间件发送到所有的订阅，然后可以从 IntraProcessManager 中检索原始消息。

![Current IPC Block Diagram](../img/intraprocess_communication/old_ipc.png)

Several shortcomings of the current implementation are listed below.

> 以下列出了当前实施的几个缺点。

### Incomplete Quality of Service support

The current implementation can't be used when the QoS durability value is set to `Transient Local`.

> 目前的实施方案无法在 QoS 耐久性值设置为“Transient Local”时使用。

The current implementation does not enforce the depth of the QoS history in a correct way.

> 目前的实现没有正确地强制执行 QoS 历史的深度。

The reason is that there is a single ring buffer per `Publisher` and its size is equal to the depth of the `Publisher`'s history.

> 原因是每个发布者都有一个单独的环形缓冲区，其大小等于发布者的历史深度。

A `Publisher` stores a message in the ring buffer and then it sends a meta-message to allow a `Subscription` to retrieve it.

> 发布者将消息存储在环形缓冲区中，然后发送元消息以允许订阅者检索它。

The `Subscription` correctly stores meta-messages up to the number indicated by its depth of the history, but, depending on the frequency at which messages are published and callbacks are triggered, it may happen that a meta-message processed from the `Subscription` does not correspond anymore to a valid message in the ring buffer, because it has been already overwritten.

> 订阅正确地存储元消息，最多可以存储历史的深度所指示的数量，但是，根据发布消息和触发回调的频率，可能会发生从订阅中处理的元消息不再对应于环形缓冲区中的有效消息，因为它已经被覆盖了。

This results in the loss of the message and it is also a difference in behavior between intra and inter-process communication, since, with the latter, the message would have been received.

> 这导致消息的丢失，这也是进程内通信和进程间通信之间的行为差异，因为在后者中，消息会被接收。

Moreover, even if the use of meta-messages allows to deleagate the enforcement of other QoS settings to the RMW layer, every time a message is added to the ring buffer the `IntraProcessManager` has to compute how many `Subscription`s will need it.

> 此外，即使使用元消息允许将其他 QoS 设置的执行委托给 RMW 层，每次将消息添加到环形缓冲区时，`IntraProcessManager`都必须计算有多少`Subscription`需要它。

This potentially breaks the advantage of having the meta-messages.

> 这可能会破坏拥有元信息的优势。

For example, the `IntraProcessManager` has to take into account that potentially all the known `Subscription`s will take the message, regardless of their reliability QoS.

> 例如，IntraProcessManager 必须考虑到，无论其可靠性 QoS 如何，所有已知的 Subscription 都将接收消息。

If a `Publisher` or a `Subscription` are best-effort, they may not receive the meta-message thus preventing the `IntraProcessManager` from releasing the memory in the buffer.

> 如果 publisher 或订阅者采用最佳努力，他们可能无法接收元信息，从而阻止 IntraProcessManager 释放缓冲区中的内存。

More details [here](https://index.ros.org/doc/ros2/Concepts/About-Quality-of-Service-Settings/).

> 更多详情[在这里](https://index.ros.org/doc/ros2/Concepts/About-Quality-of-Service-Settings/)。

**TODO:** take into account also new QoS: Deadline, Liveliness and Lifespan

> **待办事项：**也要考虑新的 QoS：截止日期、活力和寿命。

[reference](https://github.com/ros2/design/pull/212).

> [参考](https://github.com/ros2/design/pull/212)

### Dependent on the RMW

The current implementation of intra-process communication has to send meta-messages from the `Publisher` to the `Subscription`s.

> 当前的进程间通信实现需要发送元消息从发布者到订阅者。

This is done using the `rmw_publish` function, the implementation of which depends on the chosen middleware.

> 这是通过使用`rmw_publish`函数完成的，其实现取决于所选择的中间件。

This results in the performance of a ROS 2 application with intra-process communication enabled being heavily dependent on the chosen RMW implementation.

> 这导致了启用了内部进程通信的 ROS 2 应用程序的性能严重依赖于所选择的 RMW 实现。

Given the fact that these meta-messages have only to be received from entities within the same process, there is space for optimizing how they are transmitted by each RMW.

> 鉴于这些元信息只能从同一进程中的实体接收，每个 RMW 可以优化它们的传输方式。

However, at the moment none of the supported RMW is actively tackling this issue.

> 然而，目前没有一个支持的 RMW 正在积极解决这个问题。

This results in that the performance of a single process ROS 2 application with intra-process communication enabled are still worst than what you could expect from a non-ROS application sharing memory between its components.

> 这导致了，在启用内部进程通信的情况下，单进程 ROS 2 应用程序的性能仍然不及非 ROS 应用程序在其组件之间共享内存时所能达到的性能。

In the following some experimental evidences are quickly presented.

> 以下快速介绍了一些实验证据。

#### Memory requirement

When a `Node` creates a `Publisher` or a `Subscription` to a topic `/MyTopic`, it will also create an additional one to the topic `/MyTopic/_intra`.

> 当一个节点创建一个发布者或订阅一个主题/MyTopic 时，它还会创建一个额外的主题/MyTopic/\_intra。

The second topic is the one where meta-messages travel.

> 第二个主题是元信息传播的主题。

Our [experimental results](https://github.com/irobot-ros/ros2-performance/tree/master/performances/experiments/crystal/pub_sub_memory#adding-more-nodes-x86_64) show that creating a `Publisher` or a `Subscription` has a non-negligible memory cost.

> 我们的实验结果表明，创建发布者或订阅者会产生不可忽略的内存成本。

This is particularly true for the default RMW implementation, Fast-RTPS, where the memory requirement increases almost expontentially with the number of participants and entities.

> 这对于默认的 RMW 实现 Fast-RTPS 尤其如此，其中内存需求随着参与者和实体的数量几乎呈指数级增长。

#### Latency and CPU utilization

Publishing a meta-message has the same overhead as that of publishing a small inter-process message.

> 发布元信息的开销与发布小型进程间消息的开销相同。

However, comparing the publication/reception of an intra and an inter-process message, the former requires several additional operations: it has to store the message in the ring buffer, monitor the number of `Subscription`s, and extract the message.

> 然而，比较一个进程内消息和一个进程间消息的发布/接收，前者需要几个额外的操作：它必须将消息存储在环形缓冲区中，监视`订阅`的数量，并提取消息。

The result is that from the latency and CPU utilization point of view, it is convenient to use intra-process communication only when the message size is at least 5KB.

> 结果是，从延迟和 CPU 利用率的角度来看，只有在消息大小至少为 5KB 时，才有利于使用进程内通信。

### Problems when both inter and intra-process communication are needed

Currently, ROS 2 does not provide any API for making nodes or `Publisher` and `Subscription` to ignore each other.

> 目前，ROS 2 不提供任何 API 来使节点或发布者和订阅者互相忽略。

This feature would be useful when both inter and intra-process communication are needed.

> 这个功能在需要进程间和进程内通信时会非常有用。

The reason is that the current implementation of the ROS 2 middleware will try to deliver inter-process messages also to the nodes within the same process of the `Publisher`, even if they should have received an intra-process message.

> 原因是 ROS 2 中间件的当前实现会尝试将进程间消息也发送到发布者所在进程内的节点，即使它们应该收到进程内消息。

> [NOTE]:

The DDS specification provides ways for potentially fixing this problem, i.e. with the `ignore_participant`, `ignore_publication` and `ignore_subscription`operations.

> DDS 规范提供了解决这个问题的方法，即使用`ignore_participant`、`ignore_publication`和`ignore_subscription`操作。

Each of these can be used to ignore a remote participant or entity, allowing to behave as that remote participant did not exist.

> 这些都可以用来忽略远程参与者或实体，从而使其行为就好像远程参与者不存在一样。

The current intra-process communication uses meta-messages that are sent through the RMW between nodes in the same process.

> 当前的进程间通信使用通过 RMW 在同一进程中的节点之间发送的元消息。

This has two consequences: first it does not allow to directly "ignore" participants in the same process, because they still have to communicate in order to send and receive meta-messages, thus requiring a more fine-grained control ignoring specific `Publisher`s and `Subscription`s.

> 这有两个后果：首先，它不允许直接“忽略”同一过程中的参与者，因为他们仍然必须进行通信以发送和接收元消息，因此需要更细粒度的控制来忽略特定的`发布者`和`订阅`。

Moreover, the meta-messages could be delivered also to nodes in different processes if they have intra-process communication enabled.

> 此外，如果启用了内部进程通信，元消息也可以传递给不同进程中的节点。

As before, the messages would be discarded immediately after being received, but they would still affect the performances.

> 如以前一样，收到消息后会立即丢弃，但仍会影响性能。

The overhead caused by the additional publication of meta-messages can be potentially reduced by appending to the intra-process topic names a process specific identifier.

> 通过在进程特定标识符后附加到进程内主题名称，可以有效减少额外发布元消息所带来的开销。

## Proposed implementation

### Overview

The new proposal for intra-process communication addresses the issues previously mentioned.

> 新的内部进程通信提案解决了先前提到的问题。

It has been designed with performance in mind, so it avoids any communication through the middleware between nodes in the same process.

> 它已经被设计为考虑性能，因此它避免在同一进程中的节点之间通过中间件进行任何通信。

Consider a simple scenario, consisting of `Publisher`s and `Subscription`s all in the same process and with the durability QoS set to `volatile`.

> 考虑一个简单的场景，由发布者和订阅者组成，都在同一个过程中，而且可靠性 QoS 设置为“易失性”。

The proposed implementation creates one buffer per `Subscription`.

> 提议的实现为每个订阅创建一个缓冲区。

When a message is published to a topic, its `Publisher` pushes the message into the buffer of each of the `Subscription`s related to that topic and raises a notification, waking up the executor.

> 当一条消息发布到一个主题时，它的发布者将消息推入与该主题相关的每个订阅的缓冲区中，并引发一个通知，唤醒执行者。

The executor can then pop the message from the buffer and trigger the callback of the `Subscription`.

> 执行者然后可以从缓冲区弹出消息，并触发订阅的回调。

![Proposed IPC Block Diagram](../img/intraprocess_communication/new_ipc.png)

The choice of having independent buffers for each `Subscription` leads to the following advantages:

> 每个订阅都有独立缓冲区的选择带来以下优势：

- It is easy to support different QoS for each `Subscription`, while, at the same time, simplifying the implementation.

> 这样可以轻松地为每个订阅提供不同的服务质量，同时简化实现。

- Multiple `Subscription`s can extract messages from their own buffer in parallel without blocking each other, thus providing an higher throughput.

> 多个订阅可以并行从自己的缓冲区中提取消息，而不会相互阻塞，从而提高吞吐量。

The only drawback is that the system is not reusing as much resources as possible, compared to sharing buffers between entities.

> 系统与共享缓冲区之间的资源重用程度不够，这是唯一的缺点。

However, from a practical point of view, the memory overhead caused by the proposed implementation with respect to the current one, will always be only a tiny delta compared to the overall memory usage of the application.

> 然而，从实际的角度来看，所提出的实施与当前实施相比，内存开销将始终仅是应用程序的整体内存使用量的微小差值。

There are three possible data-types that can be stored in the buffer:

> 在缓冲区中可以存储三种可能的数据类型：

- `MessageT`

> - 消息 T

- `shared_ptr<const MessageT>`

> shared_ptr<const MessageT>：共享指针指向 const MessageT

- `unique_ptr<MessageT>`

> 唯一的指针<MessageT>

The choice of the buffer data-type is controlled through an additional field in the `SubscriptionOptions`.

> 通过`SubscriptionOptions`中的额外字段控制缓冲数据类型的选择。

The default value for this option is denominated `CallbackDefault`, which corresponds to selecting the type between `shared_ptr<constMessageT>` and `unique_ptr<MessageT>` that better fits with its callback type.

> 默认值为“CallbackDefault”，它对应于在`shared_ptr<constMessageT>`和`unique_ptr<MessageT>`之间选择与回调类型最匹配的类型。

This is deduced looking at the output of `AnySubscriptionCallback::use_take_shared_method()`.

> 这是通过观察`AnySubscriptionCallback::use_take_shared_method()`的输出得出的。

If the history QoS is set to `keep all`, the buffers are dynamically adjusted in size up to the maximum resource limits specified by the underlying middleware.

> 如果历史 QoS 设置为“保留全部”，缓冲区的大小将根据底层中间件指定的最大资源限制动态调整。

On the other hand, if the history QoS is set to `keep last`, the buffers have a size equal to the depth of the history and they act as ring buffers (overwriting the oldest data when trying to push while its full).

> 另一方面，如果历史 QoS 设置为“保留最后一个”，缓冲区的大小等于历史深度，它们充当环形缓冲区(在尝试推送时达到最大容量时会覆盖最早的数据)。

> [NOTE]:
> In the inter-process case, the middlewares use buffers in both publisher and subscription.

> 在进程间的情况下，中间件在发布者和订阅者中都使用缓冲区。

If the subscription queue is full, the publisher one would start to fill and then finally the publish call would block when that queue is full.

> 如果订阅队列已满，发布者会开始填充，然后当队列已满时，发布调用将被阻塞。

Since the intra-process communication uses a single queue on the subscription, this behavior can't be exactly emulated.

> 由于进程间通信使用订阅的单个队列，因此无法准确模拟此行为。

Buffers are not only used in `Subscription`s but also in each `Publisher` with a durability QoS of type `transient local`.

> 缓冲区不仅用于订阅，而且还用于具有持久性 QoS 类型“瞬态本地”的每个发布者。

The data-type stored in the `Publisher` buffer is always `shared_ptr<const MessageT>`.

> `Publisher` 缓冲区中存储的数据类型总是 `shared_ptr<const MessageT>`。

A new class derived from `rclcpp::Waitable` is defined, which is named `SubscriptionIntraProcessWaitable`.

> 一个新的类从`rclcpp::Waitable`派生，命名为`SubscriptionIntraProcessWaitable`。

An object of this type is created by each `Subscription` with intra-process communication enabled and it is used to notify the `Subscription` that a new message has been pushed into its ring buffer and that it needs to be processed.

> 每个启用内部进程通信的`订阅`都会创建一个此类型的对象，它用于通知`订阅`新消息已推入其环形缓冲区，需要进行处理。

The `IntraProcessManager` class stores information about each `Publisher` and each `Subscription`, together with pointers to these structures.

> IntraProcessManager 类存储关于每个 Publisher 和每个 Subscription 的信息，以及指向这些结构的指针。

This allows the system to know which entities can communicate with each other and to have access to methods for pushing data into the buffers.

> 这允许系统知道哪些实体可以彼此通信，并有权访问将数据推入缓冲区的方法。

The decision whether to publish inter-process, intra-process or both is made every time the `Publisher::publish()` method is called.

> 每次调用`Publisher::publish()`方法时，都会做出是发布跨进程、内部进程还是两者都发布的决定。

For example, if the `NodeOptions::use_intra_process_comms_` is enabled and all the known `Subscription`s are in the same process, then the message is only published intra-process.

> 例如，如果启用了`NodeOptions::use_intra_process_comms_`，并且所有已知的`Subscription`都在同一个进程中，那么消息只会在进程内发布。

This remains identical to the current implementation.

> 这与目前的实施保持不变。

### Creating a publisher

1. User calls `Node::create_publisher<MessageT>(...)`.

> 用户调用`Node::create_publisher<MessageT>(...)`。

2. This boils down to `NodeTopics::create_publisher(...)`, where a `Publisher` is created through the factory.

> 这可以归结为`NodeTopics::create_publisher(...)`，其中通过工厂创建一个`Publisher`。

3. Here, if intra-process communication is enabled, eventual intra-process related variables are initialized through the `Publisher::SetupIntraProcess(...)` method.

> 如果启用了进程内通信，可以通过`Publisher::SetupIntraProcess(...)`方法来初始化相关的进程内变量。

4. Then the `IntraProcessManager` is notified about the existence of the new `Publisher` through the method `IntraProcessManager::add_publisher(PublisherBase::SharedPtr publisher, PublisherOptions options)`.

> 然后，通过方法`IntraProcessManager::add_publisher(PublisherBase::SharedPtr publisher, PublisherOptions options)`，`IntraProcessManager`会被通知新的`Publisher`的存在。

5. `IntraProcessManager::add_publisher(...)` stores the `Publisher` information in an internal structure of type `PublisherInfo`.

> IntraProcessManager::add_publisher(...)存储`Publisher`信息到一个类型为`PublisherInfo`的内部结构中。

The structure contains information about the `Publisher`, such as its QoS and its topic name, and a weak pointer for the `Publisher` object.

> 结构包含有关发布者的信息，例如它的 QoS 和主题名称，以及一个发布者对象的弱指针。

An `uint64_t pub_id` unique within the `rclcpp::Context` is assigned to the `Publisher`.

> 一个`uint64_t pub_id`在`rclcpp::Context`中是唯一的，被分配给`Publisher`。

The `IntraProcessManager` contains a `std::map<uint64_t, PublisherInfo>` object where it is possible to retrieve the `PublisherInfo` of a specific `Publisher` given its id.

> IntraProcessManager 包含一个 std::map<uint64_t, PublisherInfo>对象，可以根据发布者的 id 获取其 PublisherInfo 信息。

The function returns the `pub_id`, that is stored within the `Publisher`.

> 函数返回存储在 publisher 中的`pub_id`。

If the `Publisher` QoS is set to `transient local`, then the `Publisher::SetupIntraProcess(...)` method will also create a ring buffer of the size specified by the depth from the QoS.

> 如果`发布者`QoS 设置为`瞬态本地`，那么`Publisher :: SetupIntraProcess(...)`方法也将根据 QoS 指定的深度创建一个环形缓冲区。

### Creating a subscription

1. User calls `Node::create_subscription<MessageT>(...)`.

> 用户调用`Node::create_subscription<MessageT>(...)`。

2. This boils down to `NodeTopics::create_subscription(...)`, where a `Subscription` is created through the factory.

> 这可以归结为`NodeTopics::create_subscription(...)`，其中通过工厂创建了一个`Subscription`。

3. Here, if intra-process communication is enabled, intra-process related variables are initialized through the `Subscription::SetupIntraProcess(...)` method. The most relevant ones being the ring buffer and the waitable object.

> 如果启用了内部进程通信，可以通过`Subscription::SetupIntraProcess(...)`方法来初始化内部进程相关的变量。最相关的是环形缓冲区和可等待对象。

4. Then the `IntraProcessManager` is notified about the existence of the new `Subscription` through the method `IntraProcessManager::add_subscription(SubscriptionBase::SharedPtr subscription, SubscriptionOptions options)`.

> 然后，通过方法`IntraProcessManager::add_subscription(SubscriptionBase :: SharedPtr订阅，SubscriptionOptions选项)`，`IntraProcessManager`会收到有关新`Subscription`存在的通知。

5. `IntraProcessManager::add_subscription(...)` stores the `Subscription` information in an internal structure of type `SubscriptionInfo`.

> IntraProcessManager::add_subscription(...) 将`Subscription`信息存储在类型为`SubscriptionInfo`的内部结构中。

The structure contains information about the `Subscription`, such as its QoS, its topic name and the type of its callback, and a weak pointer for the `Subscription` object.

> 该结构包含关于订阅的信息，如其 QoS、主题名称和回调类型，以及一个用于订阅对象的弱指针。

An `uint64_t sub_id` unique within the `rclcpp::Context` is assigned to the `Subscription`.

> 一个`uint64_t sub_id`，在`rclcpp::Context`中是唯一的，被分配给`Subscription`。

The `IntraProcessManager` contains a `std::map<uint64_t, SubscriptionInfo>` object where it is possible to retrieve the `SubscriptionInfo` of a specific `Subscription` given its id.

> IntraProcessManager 包含一个 std::map<uint64_t, SubscriptionInfo>对象，其中可以根据订阅的 id 检索特定订阅的 SubscriptionInfo。

There is also an additional structure `std::map<uint64_t, std::pair<std::set<uint64_t>, std::set<uint64_t>>>`.

> 还有一个额外的结构 `std::map<uint64_t, std::pair<std::set<uint64_t>, std::set<uint64_t>>>`。

The key of the map is the unique id of a `Publisher` and the value is a pair of sets of ids.

> 键是 publisher 的唯一 ID，值是一对 ID 集合。

These sets contain the ids of the `Subscription`s that can communicate with the `Publisher`.

> 这些集合包含可以与发布者通信的订阅的 ID。

We have two different sets because we want to differentiate the `Subscription`s depending on whether they request ownership of the received messages or not (note that this decision is done looking at their buffer, since the `Publisher` does not have to interact with the `Subscription` callback). 6. The `SubscriptionIntraProcessWaitable` object is added to the list of Waitable interfaces of the node through `node_interfaces::NodeWaitablesInterface::add_waitable(...)`.

> 我们有两个不同的集合，因为我们想根据订阅是否请求拥有收到的消息来区分它们(注意，此决定是通过它们的缓冲区来完成的，因为发布者不必与订阅者的回调交互)。6. 通过`node_interfaces :: NodeWaitablesInterface :: add_waitable(...)`将`SubscriptionIntraProcessWaitable`对象添加到节点的 Waitable 接口列表中。

It is added to the same callback group used for the standard inter-process communication of that topic.

> 它被添加到用于该主题标准进程间通信的相同回调组中。

### Publishing only intra-process

#### Publishing unique_ptr

1. User calls `Publisher::publish(std::unique_ptr<MessageT> msg)`.

> 用户调用`Publisher::publish(std::unique_ptr<MessageT> msg)`。

2. `Publisher::publish(std::unique_ptr<MessageT> msg)` calls `IntraProcessManager::do_intra_process_publish(uint64_t pub_id, std::unique_ptr<MessageT> msg)`.

> 2. publisher::发布(std::unique_ptr<MessageT> msg) 调用 IntraProcessManager::do_intra_process_publish(uint64_t pub_id, std::unique_ptr<MessageT> msg)。

3. `IntraProcessManager::do_intra_process_publish(...)` uses the `uint64_t pub_id` to call `IntraProcessManager::get_subscription_ids_for_pub(uint64_t pub_id)`.

> IntraProcessManager::do_intra_process_publish(...)使用 uint64_t pub_id 调用 IntraProcessManager::get_subscription_ids_for_pub(uint64_t pub_id)。

This returns the ids corresponding to `Subscription`s that have a QoS compatible for receiving the message.

> 这会返回与具有接收消息兼容的 QoS 相对应的`Subscription`的 ID。

These ids are divided into two sublists, according to the data-type that is stored in the buffer of each `Susbscription`: requesting ownership (`unique_ptr<MessageT>`) or accepting shared (`shared_ptr<MessageT>`, but also `MessageT` since it will copy data in any case).

> 这些 ID 根据每个订阅中缓冲区存储的数据类型被分为两个子列表：请求拥有权(unique_ptr<MessageT>)或接受共享(shared_ptr<MessageT>，但也有 MessageT，因为它将在任何情况下复制数据)。

4. The message is "added" to the ring buffer of all the items in the lists.

> 消息已添加到所有列表项的环形缓冲区中。

The `rcl_guard_condition_t` member of `SubscriptionIntraProcessWaitable` of each `Subscription` is triggered (this wakes up `rclcpp::spin`).

> `每个订阅的SubscriptionIntraProcessWaitable的rcl_guard_condition_t成员被触发(这会唤醒rclcpp::spin)。`

The way in which the `std::unique_ptr<MessageT>` message is "added" to a buffer, depends on the type of the buffer.

> `std::unique_ptr<MessageT>`消息添加到缓冲区的方式取决于缓冲区的类型。

- `BufferT = unique_ptr<MessageT>` The buffer receives a copy of `MessageT` and has ownership on it; for the last buffer, a copy is not necessary as ownership can be transferred.

> 缓冲区 T = unique_ptr<MessageT>，缓冲区接收一份 MessageT 的副本，并拥有对其的所有权；对于最后一个缓冲区，不需要副本，可以直接转移所有权。

- `BufferT = shared_ptr<const MessageT>` Every buffer receives a shared pointer of the same `MessageT`; no copies are required.

> BufferT = shared_ptr<const MessageT>，每个缓冲区都接收一个相同的 MessageT 的共享指针，不需要复制。

- `BufferT = MessageT` A copy of the message is added to every buffer.

> 缓冲 T = 消息 T，每个缓冲区都添加了消息的副本。

![Sequence UML diagram](../img/intraprocess_communication/intra_process_only.png)

#### Publishing other message types

The `Publisher::publish(...)` method is overloaded to support different message types:

> `Publisher::publish(...)` 方法被重载以支持不同的消息类型：

- `unique_ptr<MessageT>`

> 唯一指针<MessageT>

- `MessageT &`

> - 消息 T&

- `MessageT*`

> - 消息 T\*

- `const shared_ptr<const MessageT>`

> const shared_ptr<const MessageT>：共享指针指向常量 MessageT

The last two of them are actually deprecated since ROS 2 Dashing.

> 最后两个实际上自 ROS 2 Dashing 以来已经弃用了。

All these methods are unchanged with respect to the current implementation: they end up creating a `unique_ptr` and calling the `Publisher::publish(std::unique_ptr<MessageT> msg)` described above.

> 所有这些方法都与当前实施没有变化：它们最终会创建一个`unique_ptr`并调用上述`Publisher::publish(std::unique_ptr<MessageT> msg)`。

### Receiving intra-process messages

As previously described, whenever messages are added to the ring buffer of a `Subscription`, a condition variable specific to the `Subscription` is triggered.

> 当消息添加到订阅的环形缓冲区时，会触发与订阅相关的条件变量。

This condition variable has been added to the `Node` waitset so it is being monitored by the `rclcpp::spin`.

> 这个条件变量已经添加到`Node` waitset 中，因此它正在被`rclcpp::spin`监视。

Remember that the `SubscriptionIntraProcessWaitable` object has access to the ring buffer and to the callback function pointer of its related `Subscription`.

> 记住，`SubscriptionIntraProcessWaitable`对象可以访问它所关联的`Subscription`的环形缓冲区和回调函数指针。

1. The guard condition linked with the `SubscriptionIntraProcessWaitable` object awakes `rclcpp::spin`.

> 1. 当与`SubscriptionIntraProcessWaitable`对象相关联的守卫条件唤醒`rclcpp::spin`时。

2. The `SubscriptionIntraProcessWaitable::is_ready()` condition is checked. This has to ensure that the ring buffer is not empty.

> 检查`SubscriptionIntraProcessWaitable::is_ready()`条件。这必须确保环形缓冲区不是空的。

3. The `SubscriptionIntraProcessWaitable::execute()` function is triggered. Here the first message is extracted from the buffer and then the `SubscriptionIntraProcessWaitable` calls the `AnySubscriptionCallback::dispatch_intra_process(...)` method. There are different implementations for this method, depending on the data-type stored in the buffer.

> 3. `SubscriptionIntraProcessWaitable::execute()`函数被触发。在这里，第一条消息从缓冲区中提取出来，然后`SubscriptionIntraProcessWaitable`调用`AnySubscriptionCallback::dispatch_intra_process(...)`方法。根据缓冲区中存储的数据类型，这个方法有不同的实现。

4. The `AnySubscriptionCallback::dispatch_intra_process(...)` method triggers the associated callback. Note that in this step, if the type of the buffer is a smart pointer one, no message copies occurr, as ownership has been already taken into account when pushing a message into the queue.

> 4.`AnySubscriptionCallback::dispatch_intra_process(...)`方法触发相关回调。注意，在这一步中，如果缓冲区的类型是一个智能指针，则不会发生消息复制，因为在将消息推入队列时已经考虑了所有权。

### Publishing intra and inter-process

1. User calls `Publisher::publish(std::unique_ptr<MessageT> msg)`.

> 用户调用`Publisher::publish(std::unique_ptr<MessageT> msg)`。

2. The message is moved into a shared pointer `std::shared_ptr<MessageT> shared_msg = std::move(msg)`.

> 2. 消息被移动到一个共享指针 std::shared_ptr<MessageT> shared_msg = std::move(msg)。

3. `Publisher::publish(std::unique_ptr<MessageT> msg)` calls `IntraProcessManager::do_intra_process_publish(uint64_t pub_id, std::shared_ptr<MessageT> shared_msg)`.

> 3. 函数 Publisher::publish(std::unique_ptr<MessageT> msg) 调用 IntraProcessManager::do_intra_process_publish(uint64_t pub_id, std::shared_ptr<MessageT> shared_msg)。

The following steps are identical to steps 3, 4, and 5 applied when publishing only intra-process.

> 以下步骤与仅发布内部过程时所采用的步骤 3、4 和 5 相同。

4. `IntraProcessManager::do_intra_process_publish(...)` uses the `uint64_t pub_id` to call `IntraProcessManager::get_subscription_ids_for_pub(uint64_t pub_id)`.

> IntraProcessManager::do_intra_process_publish(...)使用 uint64_t pub_id 调用 IntraProcessManager::get_subscription_ids_for_pub(uint64_t pub_id)。

Then it calls `IntraProcessManager::find_matching_subscriptions(PublisherInfo pub_info)`.

> 然后它调用 IntraProcessManager::find_matching_subscriptions(PublisherInfo pub_info)。

This returns the ids corresponding to `Subscription`s that have a QoS compatible for receiving the message.

> 这将返回与`订阅`具有接收消息兼容的 QoS 相对应的 ID。

These ids are divided into two sublists, according to the data-type that is stored in the buffer of each `Susbscription`: requesting ownership (`unique_ptr<MessageT>`) or accepting shared (`shared_ptr<MessageT>`, but also `MessageT` since it will copy data in any case).

> 这些 ID 根据每个`Subscription`缓冲区中存储的数据类型被分为两个子列表：请求所有权(`unique_ptr<MessageT>`)或接受共享(`shared_ptr<MessageT>`，但也可以`MessageT`，因为它会在任何情况下复制数据)。

5. The message is "added" to the ring buffer of all the items in the list.

> "消息已添加到列表中所有项目的环形缓冲区中。"

The `rcl_guard_condition_t` member of `SubscriptionIntraProcessWaitable` of each `Subscription` is triggered (this wakes up `rclcpp::spin`).

> 每个订阅的 SubscriptionIntraProcessWaitable 的 rcl_guard_condition_t 成员被触发(这会唤醒 rclcpp::spin)。

After the intra-process publication, the inter-process one takes place.

> 在内部流程发布之后，外部流程就会开始。

6. `Publisher::publish(std::unique_ptr<MessageT> msg)` calls `Publisher::do_inter_process_publish(const MessageT & inter_process_msg)`, where `MessageT inter_process_msg = *shared_msg`.

> 6. 函数 Publisher::publish(std::unique_ptr<MessageT> msg)调用 Publisher::do_inter_process_publish(const MessageT & inter_process_msg)，其中 MessageT inter_process_msg = \*shared_msg。

The difference from the previous case is that here a `std::shared_ptr<const MessageT>` is being "added" to the buffers.

> 在这种情况下，与之前的情况不同的是，这里向缓冲区添加了一个`std::shared_ptr<const MessageT>`。

> [NOTE]:

- `BufferT = unique_ptr<MessageT>` The buffer receives a copy of `MessageT` and has ownership on it.

> 缓冲区 T = unique_ptr<MessageT>，缓冲区接收一份 MessageT 的副本并拥有对其的所有权。

- `BufferT = shared_ptr<const MessageT>` Every buffer receives a shared pointer of the same `MessageT`, so no copies are required.

> - BufferT = shared_ptr<const MessageT>，每个缓冲区都接收相同 MessageT 的共享指针，因此不需要复制。

- `BufferT = MessageT` A copy of the message is added to every buffer.

> 缓冲器 T = 消息 T：每个缓冲区都添加了消息的副本。

The difference with publishing a unique_ptr is that here it is not possible to save a copy.

> 发布 unique_ptr 的区别在于这里不可能保存一份副本。

If you move the ownership of the published message to one of the `Subscription` (so potentially saving a copy as done in the previous case), you will need to create a new copy of the message for inter-process publication.

> 如果您将发布的消息的所有权移交给一个`订阅`(因此可以像前面的情况一样保存一份副本)，您将需要为跨进程发布创建一个新的消息副本。

![Sequence UML diagram](../img/intraprocess_communication/intra_inter_process.png)

### QoS features

The proposed implementation can handle all the different QoS.

> 提议的实施可以处理所有不同的服务质量。

- If the history is set to `keep_last`, then the depth of the history corresponds to the size of the ring buffer. On the other hand, if the history is set to `keep_all`, the buffer becomes a standard FIFO queue with an unbounded size.

> 如果历史记录设置为“keep_last”，那么历史深度就对应于环形缓冲区的大小。另一方面，如果历史记录设置为“keep_all”，缓冲区就变成了一个无界大小的标准 FIFO 队列。

- The reliability is only checked by the `IntraProcessManager` in order to understand if a `Publisher` and a `Subscription` are compatible. The use of buffers ensures that all the messages are delivered without the need to resend them. Thus, both options, `reliable` and `best-effort`, are satisfied.

> 可靠性只由 IntraProcessManager 检查，以了解发布者和订阅是否兼容。缓冲区的使用确保所有消息都能够传递，无需重新发送。因此，可靠性和最佳效果两种选项都得到满足。

- The durability QoS is used to understand if a `Publisher` and a `Subscription` are compatible. How this QoS is handled is described in details in the following paragraph.

> - 可靠性 QoS 用于了解`发布者`和`订阅`是否兼容。该 QoS 的处理方式在下面的段落中详细描述。

#### Handling Transient Local

If the `Publisher` durability is set to `transient_local` an additional buffer on the `Publisher` side is used to store the sent intra-process messages.

> 如果发布者的耐久性设置为 transient_local，发布者端会使用额外的缓冲区来存储发送的进程内消息。

Late-joiner `Subscription`s will have to extract messages from this buffer once they are added to the `IntraProcessManager`.

> 加入晚了的訂閱者必須在加入 IntraProcessManager 後從緩衝區提取訊息。

In this case the `IntraProcessManager` has to check if the recently created `Subscription` is a late-joiner, and, if it is, it has to retrieve messages from the `Transient Local` `Publisher`s.

> 在这种情况下，IntraProcessManager 必须检查最近创建的 Subscription 是否是后期加入者，如果是，它必须从 Transient Local 发布者那里检索消息。

1. Call `IntraProcessManager::find_matching_publishers(SubscriptionInfo sub_info)` that returns a list of stored `PublisherInfo` that have a QoS compatible for sending messages to this new `Subscription`.

> 调用 IntraProcessManager::find_matching_publishers(SubscriptionInfo sub_info)，该函数返回一个存储的 PublisherInfo 列表，这些 PublisherInfo 具有可以向这个新的 Subscription 发送消息的 QoS 兼容性。

These will be all `Transient Local` `Publisher`s, so they have a ring buffer.

> 这些都是“Transient Local”的发布者，因此它们有一个环形缓冲区。

2. Copy messages from all the ring buffers found into the ring buffer of the new `Subscription`.

> 复制所有找到的环形缓冲区中的消息，并将其复制到新的“订阅”环形缓冲区中。

**TODO:** are there any constraints on the order in which old messages have to be retrieved? (i.e. 1 publisher at the time; all the firsts of each publisher, then all the seconds ...).

> **待办事项：**检索旧消息时是否有任何限制？ (即每次一个发布者；所有发布者的第一个，然后所有第二个...)。

3. If at least 1 message was present, trigger the `rcl_guard_condition_t` member of the `SubscriptionIntraProcessWaitable` associated with the new `Subscription`.

> 如果至少有 1 条消息存在，触发与新订阅相关联的`SubscriptionIntraProcessWaitable`的`rcl_guard_condition_t`成员。

However, this is not enough as it does not allow to handle the scenario in which a `transient local` `Publisher` has only intra-process `Subscription`s when it is created, but, eventually, a `transient local` `Subscription` in a different process joins.

> 然而，这还不够，因为它不允许处理当一个“瞬态本地”发布者在创建时只有进程内订阅，但最终一个不同进程中的“瞬态本地”订阅加入的情况。

Initially, published messages are not passed to the middleware, since all the `Subscription`s are in the same process.

> 一开始，发布的消息不会传递到中间件，因为所有的订阅都在同一个进程中。

This means that the middleware is not able to store old messages for eventual late-joiners.

> 这意味着中间件无法存储旧消息以供最终加入的人使用。

The solution to this issue consists in always publishing both intra and inter-process when a `Publisher` has `transient local` durability.

> 解决此问题的方法在于，当发布者具有“暂时本地”持久性时，总是发布内部和跨进程。

For this reason, when `transient local` is enabled, the `do_intra_process_publish(...)` function will always process a shared pointer.

> 因此，当启用“transient local”时，`do_intra_process_publish(...)`函数将始终处理共享指针。

This allows us to add the logic for storing the published messages into the buffers only in one of the two `do_intra_process_publish(...)` cases and also it allows to use buffers that have only to store shared pointers.

> 这使我们可以仅在两种`do_intra_process_publish(...)`情况之一中为存储已发布消息添加逻辑，并且还允许使用仅用于存储共享指针的缓冲区。

### Number of message copies

In the previous sections, it has been briefly described how a message can be added to a buffer, i.e. if it is necessary to copy it or not.

> 在前面的部分，简要描述了如何将消息添加到缓冲区，即是否需要复制它。

Here some details about how this proposal adresses some more complex cases.

> 这个提案如何解决更复杂情况的一些详细信息。

As previously stated, regardless of the data-type published by the user, the flow always goes towards `Publisher::publish(std::unique_ptr<MessageT> msg)`.

> 正如先前所述，不管用户发布的数据类型是什么，流程总是朝着`Publisher::publish(std::unique_ptr<MessageT> msg)`发展。

The `std::unique_ptr<MessageT> msg` is passed to the `IntraProcessManger` that decides how to add this message to the buffers.

> `std::unique_ptr<MessageT> msg`被传递给`IntraProcessManger`，以决定如何将此消息添加到缓冲区。

The decision is taken looking at the number and the type, i.e. if they want ownership on messages or not, of the `Subscription`s.

> 根据订阅的数量和类型(即是否要求拥有消息的所有权)来做出决定。

If all the `Subscription`s want ownership of the message, then a total of `N-1` copies of the message are required, where `N` is the number of `Subscription`s.

> 如果所有的订阅者都想拥有消息的所有权，那么需要 N-1 份消息的副本，其中 N 是订阅者的数量。

The last one will receive ownership of the published message, thus saving a copy.

> 最后一个将拥有发布消息的所有权，从而保存一份副本。

If none of the `Subscription`s want ownership of the message, `0` copies are required.

> 如果没有订阅想要拥有这条消息，则不需要复制。

It is possible to convert the message into a `std::shared_ptr<MessageT> msg` and to add it to every buffer.

> 可以将消息转换为`std::shared_ptr<MessageT> msg`，并将其添加到每个缓冲区中。

If there is 1 `Subscription` that does not want ownership while the others want it, the situation is equivalent to the case of everyone requesting ownership:`N-1` copies of the message are required.

> 如果有 1 个订阅不想要所有权，而其他人想要，那么情况就相当于每个人都要求所有权：需要 N-1 份消息。

As before the last `Subscription` will receive ownership.

> 上一次订阅者将获得所有权。

If there is more than 1 `Subscription` that do not want ownership while the others want it, a total of `M` copies of the message are required, where `M` is the number of `Subscription`s that want ownership.

> 如果有多个订阅者不希望拥有所有权，而其他订阅者希望拥有所有权，则需要发送总共 M 份消息，其中 M 是希望拥有所有权的订阅者数量。
> `1` copy will be shared among all the `Subscription`s that do not want ownership, while `M-1` copies are for the others.

As in the current implementation, if both inter and intra-process communication are needed, the `std::unique_ptr<MessageT> msg` will be converted into a `std::shared_ptr<MessageT> msg` and passed respectively to the `do_intra_process_publish` and `do_inter_process_publish` functions.

> 在目前的实现中，如果需要内部和跨进程通信，将`std::unique_ptr<MessageT> msg`转换为`std::shared_ptr<MessageT> msg`，并分别传递给`do_intra_process_publish`和`do_inter_process_publish`函数。

A copy of the message will be given to all the `Subscription`s requesting ownership, while the others can copy the published shared pointer.

> 所有请求拥有权的订阅者都将收到一份消息的副本，而其他人可以复制发布的共享指针。

The following tables show a recap of when the proposed implementation has to create a new copy of a message.

> 以下表格概括了当拟议的实施需要创建消息的新副本时的情况。

The notation `@` indicates a memory address where the message is stored, different memory addresses correspond to different copies of the message.

> 符号'@'表示存储消息的内存地址，不同的内存地址对应不同的消息副本。

#### Publishing UniquePtr

```
    | publish\<T\>          | BufferT                                                                                    | Results                    |
    | --------------------- | ------------------------------------------------------------------------------------------ | -------------------------- |
    | unique_ptr\<MsgT\> @1 | unique_ptr\<MsgT\>                                                                         | @1                         |
    | unique_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> unique_ptr\<MsgT\>                                                 | @1 <br> @2                 |
    | unique_ptr\<MsgT\> @1 | shared_ptr\<MsgT\>                                                                         | @1                         |
    | unique_ptr\<MsgT\> @1 | shared_ptr\<MsgT\> <br> shared_ptr\<MsgT\>                                                 | @1 <br> @1                 |
    | unique_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> shared_ptr\<MsgT\>                                                 | @1 <br> @2                 |
    | unique_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> shared_ptr\<MsgT\> <br> shared_ptr\<MsgT\>                         | @1 <br> @2 <br> @2         |
    | unique_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> unique_ptr\<MsgT\> <br> shared_ptr\<MsgT\> <br> shared_ptr\<MsgT\> | @1 <br> @2 <br> @3 <br> @3 |
```

#### Publishing SharedPtr

```
    | publish\<T\>          | BufferT                                                                                    | Results                    |
    | --------------------- | ------------------------------------------------------------------------------------------ | -------------------------- |
    | shared_ptr\<MsgT\> @1 | unique_ptr\<MsgT\>                                                                         | @2                         |
    | shared_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> unique_ptr\<MsgT\>                                                 | @2 <br> @3                 |
    | shared_ptr\<MsgT\> @1 | shared_ptr\<MsgT\>                                                                         | @1                         |
    | shared_ptr\<MsgT\> @1 | shared_ptr\<MsgT\> <br> shared_ptr\<MsgT\>                                                 | @1 <br> @1                 |
    | shared_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> shared_ptr\<MsgT\>                                                 | @2 <br> @1                 |
    | shared_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> shared_ptr\<MsgT\> <br> shared_ptr\<MsgT\>                         | @2 <br> @1 <br> @1         |
    | shared_ptr\<MsgT\> @1 | unique_ptr\<MsgT\> <br> unique_ptr\<MsgT\> <br> shared_ptr\<MsgT\> <br> shared_ptr\<MsgT\> | @2 <br> @3 <br> @1 <br> @1 |
```

The possibility of setting the data-type stored in each buffer becomes helpful when dealing with more particular scenarios.

> 在处理更多特定场景时，设置每个缓冲区中存储的数据类型的可能性变得有帮助。

Considering a scenario with N `Subscription`s all taking a unique pointer.

> 考虑一个有 N 个不同指针的订阅场景。

If the `Subscription`s don't actually take the message (e.g. they are busy and the message is being overwritten due to QoS settings) the default buffer type (`unique_ptr` since the callbacks require ownership) would result in the copy taking place anyway.

> 如果`订阅`实际上没有接收到消息(例如它们正忙，并且由于 QoS 设置而被覆盖)，那么默认的缓冲区类型(`unique_ptr`，因为回调需要所有权)将导致复制仍然会发生。

By setting the buffer type to `shared_ptr`, no copies are needed when the `Publisher` pushes messages into the buffers.

> 通过将缓冲区类型设置为`shared_ptr`，在`Publisher`将消息推送到缓冲区时，不需要复制。

Eventually, the `Subscription`s will copy the data only when they are ready to process it.

> 最终，只有当订阅者准备处理数据时，它们才会复制数据。

On the other hand, if the published data are very small, it can be advantageous to do not use C++ smart pointers, but to directly store the data into the buffers.

> 另一方面，如果发布的数据非常小，不使用 C++智能指针，而是直接将数据存储到缓冲区中可能会更有利。

In all this situations, the number of copies is always smaller or equal than the one required for the current intra-process implementation.

> 在所有这些情况下，复制的数量总是小于或等于当前进程实现所需的数量。

However, there is a particular scenario where having multiple buffers makes much more difficult saving a copy.

> 然而，有一种特殊情况，拥有多个缓冲区会使保存副本变得更加困难。

There are two `Subscription`s, one taking a shared pointer and the other taking a unique pointer.

> 有两个订阅，一个使用共享指针，另一个使用唯一指针。

With a more centralized system, if the first `Subscription` requests its shared pointer and then releases it before the second `Subscription` takes the message, it is potentially possible to optimize the system to manage this situation without requiring any copy.

> 通过更加集中的系统，如果第一个订阅请求共享指针，然后在第二个订阅获取消息之前释放它，有可能优化系统以处理这种情况，而不需要任何复制。

On the other hand, the proposed implementation will immediately create one copy of the message for the `Subscription` requiring ownership.

> 另一方面，所提出的实施将立即为需要所有权的`订阅`创建消息的一个副本。

Even in case of using a `shared_ptr` buffer as previously described, it becomes more difficult to ensure that the other `Subscription` is not using the pointer anymore.

> 即使使用前面描述的`shared_ptr`缓冲区，也变得更加困难来确保其他`Subscription`不再使用该指针了。

#### Where are these copies performed?

The `IntraProcessManger::do_intra_process_publish(...)` function knows whether the intra-process buffer of each `Subscription` requires ownership or not.

> 函数 IntraProcessManger::do_intra_process_publish(...)知道每个订阅的内部进程缓冲区是否需要所有权。

For this reason it can perform the minimum number of copies required by looking at the total number of `Subscription`s and their types.

> 因此，它可以通过查看总的`订阅`数量及其类型来执行所需的最少副本数量。

The buffer does not perform any copy when receiving a message, but directly stores it.

> 缓冲区在接收消息时不进行任何复制，而是直接存储它。

When extracting a message from the buffer, the `Subscription` can require any particular data-type.

> 当从缓冲区提取消息时，`Subscription`可以要求任何特定的数据类型。

The intra-process buffer will perform a copy of the message whenever necessary, for example in the previously described cases where the data-type stored in the buffer is different from the callback one.

> 缓冲区会在必要时执行消息的复制，例如在之前描述的缓冲区中存储的数据类型与回调函数的数据类型不同的情况。

## Perfomance evaluation

The implementation of the presented new intra-process communication mechanism is hosted on [GitHub here](https://github.com/alsora/rclcpp/tree/alsora/new_ipc_proposal).

> 实现所提出的新的进程间通信机制可在[GitHub 此处](https://github.com/alsora/rclcpp/tree/alsora/new_ipc_proposal)找到。

This section contains experimental results obtained comparing the current intra-process communication implementation with an initial implementation of the proposed one.

> 这一节包含了将当前的进程间通信实现与初步实现的所提出的实现进行比较所得到的实验结果。

The tests span multiple ROS 2 applications and use-cases and have been validated on different machines.

> 测试跨越多个 ROS 2 应用和用例，并在不同的机器上进行了验证。

All the following experiments have been run using the ROS 2 Dashing and with `-O2` optimization enabled.

> 所有以下实验都是使用 ROS 2 Dashing 并且启用了`-O2`优化进行的。

```

colcon build --cmake-args  -DCMAKE_CXX_FLAGS="-O2" -DCMAKE_C_FLAGS="-O2"

> colcon build --cmake-args -DCMAKE_CXX_FLAGS="-O2" -DCMAKE_C_FLAGS="-O2"

简体中文：colcon构建--cmake-args -DCMAKE_CXX_FLAGS="-O2" -DCMAKE_C_FLAGS="-O2"
```

The first test has been carried out using the `intra_process_demo` package contained in the [ROS 2 demos repository](https://github.com/ros2/demos).

> 第一次测试已经使用[ROS 2 演示库](https://github.com/ros2/demos)中包含的`intra_process_demo`包进行了测试。

A first application, called `image_pipeline_all_in_one`, is made of 3 nodes, where the fist one publishes a `unique_ptr<Image>` message.

> 一个名为“image_pipeline_all_in_one”的第一个应用由 3 个节点组成，其中第一个节点发布一个“unique_ptr<Image>”消息。

A second node subscribes to the topic and republishes the image after modifying it on a new topic.

> 第二个节点订阅此主题，并在新主题上修改图像后重新发布它。

A third node subscribes to to this last topic.

> 第三个节点订阅了这个最后的主题。

Also a variant of the application has been tested: it's `image_pipeline_with_two_image_view`, where there are 2 consumers at the end of the pipeline.

> 也测试了一个应用的变体：`image_pipeline_with_two_image_view`，在管道的末端有两个消费者。

In these tests the latency is computed as the total pipeline duration, i.e. the time from when the first node publishes the image to when the last node receives it.

> 在这些测试中，延迟被计算为总管道持续时间，即从第一个节点发布图像到最后一个节点接收图像的时间。

The CPU usage and the latency have been obtained from `top` command and averaged over the experiment duration.

> CPU 使用率和延迟已经从`top`命令中获得，并在实验持续期间进行了平均。

Performance evaluation on a laptop computer with Intel i7-6600U CPU @ 2.60GHz.

> 性能评估：使用 Intel i7-6600U CPU @ 2.60GHz 的笔记本电脑。

```
    | ROS 2 system                       | IPC      | RMW       | Latency [us] | CPU [%] | RAM [Mb] |
    | ---------------------------------- | -------- | --------- | ------------ | ------- | -------- |
    | image_pipeline_all_in_one          | off      | Fast-RTPS | 1800         | 23      | 90       |
    | image_pipeline_all_in_one          | standard | Fast-RTPS | 920          | 20      | 90       |
    | image_pipeline_all_in_one          | new      | Fast-RTPS | 350          | 15      | 90       |
    | image_pipeline_with_two_image_view | off      | Fast-RTPS | 2900         | 24      | 94       |
    | image_pipeline_with_two_image_view | standard | Fast-RTPS | 2000         | 20      | 95       |
    | image_pipeline_with_two_image_view | new      | Fast-RTPS | 1400         | 16      | 94       |
```

From this simple experiment is immediately possible to see the improvement in the latency when using the proposed intra-process communication.

> 從這個簡單的實驗可以立即看到在使用所提出的內部通訊時延遞的改善。

However, an even bigger improvement is present when analyzing the results from more complex applications.

> 然而，当分析更复杂的应用程序的结果时，改进更大。

The next results have been obtained running the iRobot benchmark application.

> 下面的结果是通过运行 iRobot 基准应用程序获得的。

This allows the user to specify the topology of a ROS 2 graph that will be entirely run in a single process.

> 这允许用户指定 ROS 2 图的拓扑结构，它将完全在单个进程中运行。

The application has been run with the topologies Sierra Nevada and Mont Blanc.

> 应用程序已经运行了 Sierra Nevada 和 Mont Blanc 两种拓扑结构。

Sierra Nevada is a 10-node topology and it contains 10 publishers and 13 subscriptions.

> "Sierra Nevada 是一个 10 节点拓扑，其中包含 10 个发布者和 13 个订阅。"

One topic has a message size of 10KB, while all the others have message sizes between 10 and 100 bytes.

> 一个主题的消息大小为 10KB，而其他所有主题的消息大小都在 10 到 100 字节之间。

Mont Blanc is a bigger 20-node topology, containing 23 publishers and 35 subscriptions.

> 蒙布朗是一个拥有 20 个节点的大型拓扑，包含 23 个发布者和 35 个订阅者。

Two topics have a message size of 250KB, three topics have message sizes between 1KB and 25KB, and the rest of the topics have message sizes smaller than 1KB.

> 两个主题的消息大小为 250KB，三个主题的消息大小在 1KB 和 25KB 之间，其余的主题的消息大小小于 1KB。

A detailed description and the source code for these application and topologies can be found [here](https://github.com/irobot-ros/ros2-performance/tree/master/performances/benchmark).

> 详细描述和这些应用程序和拓扑的源代码可以在[这里](https://github.com/irobot-ros/ros2-performance/tree/master/performances/benchmark)找到。

> [NOTE]:

Performance evaluation on a laptop computer with Intel i7-6600U CPU @ 2.60GHz.

> 性能评估：Intel i7-6600U CPU @ 2.60GHz 的笔记本电脑。

```
    | ROS 2 system  | IPC      | RMW       | Latency [us] | CPU [%] | RAM [Mb] |
    | ------------- | -------- | --------- | ------------ | ------- | -------- |
    | Sierra Nevada | off      | Fast-RTPS | 600          | 14      | 63       |
    | Sierra Nevada | standard | Fast-RTPS | 650          | 16      | 73->79   |
    | Sierra Nevada | new      | Fast-RTPS | 140          | 8       | 63       |
    | Mont Blanc    | off      | Fast-RTPS | 1050         | 22      | 180      |
    | Mont Blanc    | standard | Fast-RTPS | 750          | 18      | 213->220 |
    | Mont Blanc    | new      | Fast-RTPS | 160          | 8       | 180      |
```

A similar behavior can be observed also running the application on resource constrained platforms.

> 在资源受限的平台上运行应用程序也可以观察到类似的行为。

The following results have been obtained on a RaspberryPi 2.

> 以下结果是在 RaspberryPi 2 上获得的。

```
    | ROS 2 system  | IPC      | RMW       | Latency [us] | CPU [%] | RAM [Mb] |
    | ------------- | -------- | --------- | ------------ | ------- | -------- |
    | Sierra Nevada | off      | Fast-RTPS | 800          | 18      | 47       |
    | Sierra Nevada | standard | Fast-RTPS | 725          | 20      | 54->58   |
    | Sierra Nevada | new      | Fast-RTPS | 170          | 10      | 47       |
    | Mont Blanc    | off      | Fast-RTPS | 1500         | 30      | 130      |
    | Mont Blanc    | standard | Fast-RTPS | 950          | 26      | 154->159 |
    | Mont Blanc    | new      | Fast-RTPS | 220          | 14      | 130      |
```

For what concerns latency and CPU usage, Sierra Nevada behaves almost the same regardless if standard IPC is enabled or not.

> 就延迟和 CPU 使用率而言，无论是否启用标准 IPC，Sierra Nevada 的表现几乎是一样的。

This is due to the fact that most of its messages are very small in size.

> 这是由于大多数消息体积很小的缘故。

On the other hand, there are noticeable improvements in Mont Blanc, where several messages of non-negligible size are used.

> 另一方面，蒙塔布朗有显著的改进，其中使用了几条不可忽视的大小消息。

From the memory point of view, there is an almost constant increase in the utilization during the execution of the program when standard intra-process communication mechanism is used.

> 从记忆的角度来看，当使用标准的进程间通信机制时，程序执行期间利用率几乎不断增加。

Since the experiments have been run for 120 seconds, there is an increase of approximately 60KB per second.

> 由于实验已经运行了 120 秒，每秒大约增加 60KB。

However, even considering the initial memory usage, it is possible to see how it is affected from the presence of the additional publishers and subscriptions needed for intra-process communication.

> 即使考虑初始内存使用情况，也可以看出由于需要用于进程间通信的额外发布者和订阅者的存在，它受到了影响。

There is a difference of 10MB in Sierra Nevada and of 33MB in Mont Blanc between standard intra-process communication on and off.

> 在 Sierra Nevada 中标准进程间通信的开启和关闭之间差异为 10MB，在 Mont Blanc 中差异为 33MB。

The last experiment show how the current implementation performs in the case that both intra and inter-process communication are needed.

> 最后一次实验表明，在需要内部和跨进程通信的情况下，当前实施的表现如何。

The test consists of running Sierra Nevada on RaspberryPi 2, and, in a separate desktop machine, a single node subscribing to all the available topics coming from Sierra Nevada.

> 测试包括在 RaspberryPi 2 上运行 Sierra Nevada，另外在一台独立的台式机上，运行一个节点订阅 Sierra Nevada 发布的所有可用主题。

This use-case is common when using tools such as `rosbag` or `rviz`.

> 这种用例在使用诸如`rosbag`或`rviz`之类的工具时很常见。

```
    | ROS 2 system               | IPC      | RMW       | Latency [us] | CPU [%] | RAM [Mb] |
    | -------------------------- | -------- | --------- | ------------ | ------- | -------- |
    | Sierra Nevada + debug node | off      | Fast-RTPS | 800          | 22      | 50       |
    | Sierra Nevada + debug node | standard | Fast-RTPS | 1100         | 35      | 60->65   |
    | Sierra Nevada + debug node | new      | Fast-RTPS | 180          | 15      | 32       |
```

These results show that if there is at least one node in a different process, with the current implementation it is better to keep intra-process communication disabled.

> 这些结果表明，如果至少有一个节点位于不同的进程中，那么根据当前的实现，最好将 intra-process 通信禁用。

The proposed implementation does not require the ROS 2 middleware when publishing intra-process.

> 所提出的实施方案在发布内部进程时不需要 ROS 2 中间件。

This allows to easily remove the connections between nodes in the same process when it is required to publish also inter process, potentially resulting in a very small overhead with respect to the only intra-process case.

> 这使得在需要发布跨进程的情况下，可以轻松地删除同一进程中节点之间的连接，可能会对仅仅是同一进程的情况产生非常小的开销。

## Open Issues

There are some open issues that are not addressed neither on the current implementation nor on the proposed one.

> 有一些开放的问题既没有在当前的实施中解决，也没有在拟议中解决。

- The proposal does not take into account the problem of having a queue with twice the size when both inter and intra-process communication are used.

> 这个提议没有考虑到当使用内部和外部进程通信时，队列大小会加倍的问题。

A `Publisher` or a `Subscription` with a history depth of 10 will be able to store up to 20 messages without processing them (10 intra-process and 10 inter-process).

> 一个拥有历史深度为 10 的发布者或订阅者可以在不处理消息的情况下存储多达 20 条消息(10 条进程内消息和 10 条进程间消息)。

This issue is also present in the current implementation, since each `Subscription` is doubled.

> 这个问题也存在于当前的实现中，因为每个`订阅`都被加倍了。
